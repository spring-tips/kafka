package bootiful;

import org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator__BeanDefinitions;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.boot.autoconfigure.AutoConfigurationPackages_BasePackages__BeanDefinitions;
import org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer_SharedMetadataReaderFactoryBean__BeanDefinitions;
import org.springframework.boot.autoconfigure.aop.AopAutoConfiguration_AspectJAutoProxyingConfiguration_CglibAutoProxyConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.aop.AopAutoConfiguration_AspectJAutoProxyingConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.aop.AopAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.context.LifecycleProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration_StringHttpMessageConverterConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration_MappingJackson2HttpMessageConverterConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.info.ProjectInfoProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration_IntegrationComponentScanConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration_IntegrationConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration_IntegrationManagementConfiguration_EnableIntegrationManagementConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration_IntegrationManagementConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration_IntegrationTaskSchedulerConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.integration.IntegrationProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration_Jackson2ObjectMapperBuilderCustomizerConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration_JacksonObjectMapperBuilderConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration_JacksonObjectMapperConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration_ParameterNamesModuleConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jackson.JacksonProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.jmx.JmxProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.kafka.KafkaAnnotationDrivenConfiguration_EnableKafkaConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.kafka.KafkaAnnotationDrivenConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.kafka.KafkaProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskExecutionProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskSchedulingProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.transaction.TransactionProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration__BeanDefinitions;
import org.springframework.boot.context.properties.BoundConfigurationProperties__BeanDefinitions;
import org.springframework.boot.context.properties.ConfigurationPropertiesBinder_Factory__BeanDefinitions;
import org.springframework.boot.context.properties.ConfigurationPropertiesBinder__BeanDefinitions;
import org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor__BeanDefinitions;
import org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer_DependsOnDatabaseInitializationPostProcessor__BeanDefinitions;
import org.springframework.boot.validation.beanvalidation.MethodValidationExcludeFilter__BeanDefinitions;
import org.springframework.context.event.DefaultEventListenerFactory__BeanDefinitions;
import org.springframework.context.event.EventListenerMethodProcessor__BeanDefinitions;
import org.springframework.expression.spel.support.SimpleEvaluationContext__BeanDefinitions;
import org.springframework.expression.spel.support.StandardEvaluationContext__BeanDefinitions;
import org.springframework.integration.channel.DefaultHeaderChannelRegistry__BeanDefinitions;
import org.springframework.integration.channel.MessagePublishingErrorHandler__BeanDefinitions;
import org.springframework.integration.channel.NullChannel__BeanDefinitions;
import org.springframework.integration.channel.PublishSubscribeChannel__BeanDefinitions;
import org.springframework.integration.config.ConverterRegistrar__BeanDefinitions;
import org.springframework.integration.config.CustomConversionServiceFactoryBean__BeanDefinitions;
import org.springframework.integration.config.GlobalChannelInterceptorProcessor__BeanDefinitions;
import org.springframework.integration.config.IdGeneratorConfigurer__BeanDefinitions;
import org.springframework.integration.config.IntegrationManagementConfiguration__BeanDefinitions;
import org.springframework.integration.config.MessageHandlerMethodFactoryCreatingFactoryBean__BeanDefinitions;
import org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor__BeanDefinitions;
import org.springframework.integration.dsl.BaseIntegrationFlowDefinition_ReplyProducerCleaner__BeanDefinitions;
import org.springframework.integration.dsl.context.IntegrationFlowBeanPostProcessor__BeanDefinitions;
import org.springframework.integration.dsl.context.StandardIntegrationFlowContext__BeanDefinitions;
import org.springframework.integration.endpoint.AbstractEndpoint__BeanDefinitions;
import org.springframework.integration.handler.LoggingHandler__BeanDefinitions;
import org.springframework.integration.support.DefaultMessageBuilderFactory__BeanDefinitions;
import org.springframework.integration.support.SmartLifecycleRoleController__BeanDefinitions;
import org.springframework.integration.support.channel.BeanFactoryChannelResolver__BeanDefinitions;
import org.springframework.integration.support.converter.ConfigurableCompositeMessageConverter__BeanDefinitions;
import org.springframework.integration.support.converter.DefaultDatatypeChannelMessageConverter__BeanDefinitions;
import org.springframework.kafka.annotation.KafkaListenerAnnotationBeanPostProcessor__BeanDefinitions;
import org.springframework.kafka.config.KafkaListenerEndpointRegistry__BeanDefinitions;

/**
 * Register bean definitions for the bean factory.
 */
public class SpringKafkaApplication__BeanFactoryRegistrations {
  /**
   * Register the bean definitions.
   */
  public void registerBeanDefinitions(DefaultListableBeanFactory beanFactory) {
    beanFactory.registerBeanDefinition("org.springframework.context.event.internalEventListenerProcessor", EventListenerMethodProcessor__BeanDefinitions.getInternalEventListenerProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.context.event.internalEventListenerFactory", DefaultEventListenerFactory__BeanDefinitions.getInternalEventListenerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("springKafkaApplication", SpringKafkaApplication__BeanDefinitions.getSpringKafkaApplicationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory", SharedMetadataReaderFactoryContextInitializer_SharedMetadataReaderFactoryBean__BeanDefinitions.getInternalCachingMetadataReaderFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("springIntegrationKafkaConfiguration", SpringIntegrationKafkaConfiguration__BeanDefinitions.getSpringIntegrationKafkaConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("springKafkaConfiguration", SpringKafkaConfiguration__BeanDefinitions.getSpringKafkaConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("containerProperties", SpringIntegrationKafkaConfiguration__BeanDefinitions.getContainerPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("inboundFileOutboundKafkaIntegrationFlow", SpringIntegrationKafkaConfiguration__BeanDefinitions.getInboundFileOutboundKafkaIntegrationFlowBeanDefinition());
    beanFactory.registerBeanDefinition("inboundKafkaIntegrationFlow", SpringIntegrationKafkaConfiguration__BeanDefinitions.getInboundKafkaIntegrationFlowBeanDefinition());
    beanFactory.registerBeanDefinition("notifications", SpringKafkaConfiguration__BeanDefinitions.getNotificationsBeanDefinition());
    beanFactory.registerBeanDefinition("greetings", SpringKafkaConfiguration__BeanDefinitions.getGreetingsBeanDefinition());
    beanFactory.registerBeanDefinition("greetingsRunner", SpringKafkaConfiguration__BeanDefinitions.getGreetingsRunnerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.AutoConfigurationPackages", AutoConfigurationPackages_BasePackages__BeanDefinitions.getAutoConfigurationPackagesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration", PropertyPlaceholderAutoConfiguration__BeanDefinitions.getPropertyPlaceholderAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("propertySourcesPlaceholderConfigurer", PropertyPlaceholderAutoConfiguration__BeanDefinitions.getPropertySourcesPlaceholderConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$CglibAutoProxyConfiguration", AopAutoConfiguration_AspectJAutoProxyingConfiguration_CglibAutoProxyConfiguration__BeanDefinitions.getCglibAutoProxyConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.aop.config.internalAutoProxyCreator", AnnotationAwareAspectJAutoProxyCreator__BeanDefinitions.getInternalAutoProxyCreatorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration", AopAutoConfiguration_AspectJAutoProxyingConfiguration__BeanDefinitions.getAspectJAutoProxyingConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration", AopAutoConfiguration__BeanDefinitions.getAopAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration", ApplicationAvailabilityAutoConfiguration__BeanDefinitions.getApplicationAvailabilityAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("applicationAvailability", ApplicationAvailabilityAutoConfiguration__BeanDefinitions.getApplicationAvailabilityBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration", JacksonAutoConfiguration_Jackson2ObjectMapperBuilderCustomizerConfiguration__BeanDefinitions.getJacksonObjectMapperBuilderCustomizerConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("standardJacksonObjectMapperBuilderCustomizer", JacksonAutoConfiguration_Jackson2ObjectMapperBuilderCustomizerConfiguration__BeanDefinitions.getStandardJacksonObjectMapperBuilderCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor", ConfigurationPropertiesBindingPostProcessor__BeanDefinitions.getConfigurationPropertiesBindingPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.internalConfigurationPropertiesBinderFactory", ConfigurationPropertiesBinder_Factory__BeanDefinitions.getInternalConfigurationPropertiesBinderFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.internalConfigurationPropertiesBinder", ConfigurationPropertiesBinder__BeanDefinitions.getInternalConfigurationPropertiesBinderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.properties.BoundConfigurationProperties", BoundConfigurationProperties__BeanDefinitions.getBoundConfigurationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar.methodValidationExcludeFilter", MethodValidationExcludeFilter__BeanDefinitions.getMethodValidationExcludeFilterBeanDefinition());
    beanFactory.registerBeanDefinition("spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties", JacksonProperties__BeanDefinitions.getJacksonPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration", JacksonAutoConfiguration_JacksonObjectMapperBuilderConfiguration__BeanDefinitions.getJacksonObjectMapperBuilderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jacksonObjectMapperBuilder", JacksonAutoConfiguration_JacksonObjectMapperBuilderConfiguration__BeanDefinitions.getJacksonObjectMapperBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration", JacksonAutoConfiguration_ParameterNamesModuleConfiguration__BeanDefinitions.getParameterNamesModuleConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("parameterNamesModule", JacksonAutoConfiguration_ParameterNamesModuleConfiguration__BeanDefinitions.getParameterNamesModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration", JacksonAutoConfiguration_JacksonObjectMapperConfiguration__BeanDefinitions.getJacksonObjectMapperConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jacksonObjectMapper", JacksonAutoConfiguration_JacksonObjectMapperConfiguration__BeanDefinitions.getJacksonObjectMapperBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration", JacksonAutoConfiguration__BeanDefinitions.getJacksonAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jsonComponentModule", JacksonAutoConfiguration__BeanDefinitions.getJsonComponentModuleBeanDefinition());
    beanFactory.registerBeanDefinition("jsonMixinModule", JacksonAutoConfiguration__BeanDefinitions.getJsonMixinModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration", ConfigurationPropertiesAutoConfiguration__BeanDefinitions.getConfigurationPropertiesAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration", LifecycleAutoConfiguration__BeanDefinitions.getLifecycleAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("lifecycleProcessor", LifecycleAutoConfiguration__BeanDefinitions.getLifecycleProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties", LifecycleProperties__BeanDefinitions.getLifecyclePropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration", PersistenceExceptionTranslationAutoConfiguration__BeanDefinitions.getPersistenceExceptionTranslationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("persistenceExceptionTranslationPostProcessor", PersistenceExceptionTranslationAutoConfiguration__BeanDefinitions.getPersistenceExceptionTranslationPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration", HttpMessageConvertersAutoConfiguration_StringHttpMessageConverterConfiguration__BeanDefinitions.getStringHttpMessageConverterConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("stringHttpMessageConverter", HttpMessageConvertersAutoConfiguration_StringHttpMessageConverterConfiguration__BeanDefinitions.getStringHttpMessageConverterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration", JacksonHttpMessageConvertersConfiguration_MappingJackson2HttpMessageConverterConfiguration__BeanDefinitions.getMappingJacksonHttpMessageConverterConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("mappingJackson2HttpMessageConverter", JacksonHttpMessageConvertersConfiguration_MappingJackson2HttpMessageConverterConfiguration__BeanDefinitions.getMappingJacksonHttpMessageConverterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration", JacksonHttpMessageConvertersConfiguration__BeanDefinitions.getJacksonHttpMessageConvertersConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration", HttpMessageConvertersAutoConfiguration__BeanDefinitions.getHttpMessageConvertersAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("messageConverters", HttpMessageConvertersAutoConfiguration__BeanDefinitions.getMessageConvertersBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration", ProjectInfoAutoConfiguration__BeanDefinitions.getProjectInfoAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties", ProjectInfoProperties__BeanDefinitions.getProjectInfoPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration", TaskExecutionAutoConfiguration__BeanDefinitions.getTaskExecutionAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("taskExecutorBuilder", TaskExecutionAutoConfiguration__BeanDefinitions.getTaskExecutorBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("applicationTaskExecutor", TaskExecutionAutoConfiguration__BeanDefinitions.getApplicationTaskExecutorBeanDefinition());
    beanFactory.registerBeanDefinition("spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties", TaskExecutionProperties__BeanDefinitions.getTaskExecutionPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration", TaskSchedulingAutoConfiguration__BeanDefinitions.getTaskSchedulingAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("scheduledBeanLazyInitializationExcludeFilter", TaskSchedulingAutoConfiguration__BeanDefinitions.getScheduledBeanLazyInitializationExcludeFilterBeanDefinition());
    beanFactory.registerBeanDefinition("taskSchedulerBuilder", TaskSchedulingAutoConfiguration__BeanDefinitions.getTaskSchedulerBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties", TaskSchedulingProperties__BeanDefinitions.getTaskSchedulingPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationComponentScanConfiguration", IntegrationAutoConfiguration_IntegrationComponentScanConfiguration__BeanDefinitions.getIntegrationComponentScanConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.integration.config.IntegrationManagementConfiguration", IntegrationManagementConfiguration__BeanDefinitions.getIntegrationManagementConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("integrationManagementConfigurer", IntegrationManagementConfiguration__BeanDefinitions.getIntegrationManagementConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationManagementConfiguration$EnableIntegrationManagementConfiguration", IntegrationAutoConfiguration_IntegrationManagementConfiguration_EnableIntegrationManagementConfiguration__BeanDefinitions.getEnableIntegrationManagementConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationManagementConfiguration", IntegrationAutoConfiguration_IntegrationManagementConfiguration__BeanDefinitions.getIntegrationManagementConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationTaskSchedulerConfiguration", IntegrationAutoConfiguration_IntegrationTaskSchedulerConfiguration__BeanDefinitions.getIntegrationTaskSchedulerConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("taskScheduler", IntegrationAutoConfiguration_IntegrationTaskSchedulerConfiguration__BeanDefinitions.getTaskSchedulerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationConfiguration", IntegrationAutoConfiguration_IntegrationConfiguration__BeanDefinitions.getIntegrationConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.integration.context.defaultPollerMetadata", IntegrationAutoConfiguration_IntegrationConfiguration__BeanDefinitions.getDefaultPollerMetadataBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.integration.internalMessagingAnnotationPostProcessor", MessagingAnnotationPostProcessor__BeanDefinitions.getInternalMessagingAnnotationPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration", IntegrationAutoConfiguration__BeanDefinitions.getIntegrationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("integrationGlobalProperties", IntegrationAutoConfiguration__BeanDefinitions.getIntegrationGlobalPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("spring.jmx-org.springframework.boot.autoconfigure.jmx.JmxProperties", JmxProperties__BeanDefinitions.getJmxPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("spring.integration-org.springframework.boot.autoconfigure.integration.IntegrationProperties", IntegrationProperties__BeanDefinitions.getIntegrationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.kafka.KafkaAnnotationDrivenConfiguration$EnableKafkaConfiguration", KafkaAnnotationDrivenConfiguration_EnableKafkaConfiguration__BeanDefinitions.getEnableKafkaConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.kafka.config.internalKafkaListenerAnnotationProcessor", KafkaListenerAnnotationBeanPostProcessor__BeanDefinitions.getInternalKafkaListenerAnnotationProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.kafka.config.internalKafkaListenerEndpointRegistry", KafkaListenerEndpointRegistry__BeanDefinitions.getInternalKafkaListenerEndpointRegistryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.kafka.KafkaAnnotationDrivenConfiguration", KafkaAnnotationDrivenConfiguration__BeanDefinitions.getKafkaAnnotationDrivenConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaListenerContainerFactoryConfigurer", KafkaAnnotationDrivenConfiguration__BeanDefinitions.getKafkaListenerContainerFactoryConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaListenerContainerFactory", KafkaAnnotationDrivenConfiguration__BeanDefinitions.getKafkaListenerContainerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration", KafkaAutoConfiguration__BeanDefinitions.getKafkaAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaTemplate", KafkaAutoConfiguration__BeanDefinitions.getKafkaTemplateBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaProducerListener", KafkaAutoConfiguration__BeanDefinitions.getKafkaProducerListenerBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaConsumerFactory", KafkaAutoConfiguration__BeanDefinitions.getKafkaConsumerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaProducerFactory", KafkaAutoConfiguration__BeanDefinitions.getKafkaProducerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaAdmin", KafkaAutoConfiguration__BeanDefinitions.getKafkaAdminBeanDefinition());
    beanFactory.registerBeanDefinition("spring.kafka-org.springframework.boot.autoconfigure.kafka.KafkaProperties", KafkaProperties__BeanDefinitions.getKafkaPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration", SqlInitializationAutoConfiguration__BeanDefinitions.getSqlInitializationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties", SqlInitializationProperties__BeanDefinitions.getSqlInitializationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor", DatabaseInitializationDependencyConfigurer_DependsOnDatabaseInitializationPostProcessor__BeanDefinitions.getDependsOnDatabaseInitializationPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration", TransactionAutoConfiguration__BeanDefinitions.getTransactionAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("platformTransactionManagerCustomizers", TransactionAutoConfiguration__BeanDefinitions.getPlatformTransactionManagerCustomizersBeanDefinition());
    beanFactory.registerBeanDefinition("spring.transaction-org.springframework.boot.autoconfigure.transaction.TransactionProperties", TransactionProperties__BeanDefinitions.getTransactionPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration", RestTemplateAutoConfiguration__BeanDefinitions.getRestTemplateAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("restTemplateBuilderConfigurer", RestTemplateAutoConfiguration__BeanDefinitions.getRestTemplateBuilderConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("restTemplateBuilder", RestTemplateAutoConfiguration__BeanDefinitions.getRestTemplateBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("integrationChannelResolver", BeanFactoryChannelResolver__BeanDefinitions.getIntegrationChannelResolverBeanDefinition());
    beanFactory.registerBeanDefinition("integrationMessagePublishingErrorHandler", MessagePublishingErrorHandler__BeanDefinitions.getIntegrationMessagePublishingErrorHandlerBeanDefinition());
    beanFactory.registerBeanDefinition("nullChannel", NullChannel__BeanDefinitions.getNullChannelBeanDefinition());
    beanFactory.registerBeanDefinition("errorChannel", PublishSubscribeChannel__BeanDefinitions.getErrorChannelBeanDefinition());
    beanFactory.registerBeanDefinition("_org.springframework.integration.errorLogger.handler", LoggingHandler__BeanDefinitions.getHandlerBeanDefinition());
    beanFactory.registerBeanDefinition("_org.springframework.integration.errorLogger", AbstractEndpoint__BeanDefinitions.getErrorLoggerBeanDefinition());
    beanFactory.registerBeanDefinition("integrationEvaluationContext", StandardEvaluationContext__BeanDefinitions.getIntegrationEvaluationContextBeanDefinition());
    beanFactory.registerBeanDefinition("integrationSimpleEvaluationContext", SimpleEvaluationContext__BeanDefinitions.getIntegrationSimpleEvaluationContextBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.integration.config.IdGeneratorConfigurer#0", IdGeneratorConfigurer__BeanDefinitions.getIdGeneratorConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("integrationLifecycleRoleController", SmartLifecycleRoleController__BeanDefinitions.getIntegrationLifecycleRoleControllerBeanDefinition());
    beanFactory.registerBeanDefinition("messageBuilderFactory", DefaultMessageBuilderFactory__BeanDefinitions.getMessageBuilderFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("integrationHeaderChannelRegistry", DefaultHeaderChannelRegistry__BeanDefinitions.getIntegrationHeaderChannelRegistryBeanDefinition());
    beanFactory.registerBeanDefinition("globalChannelInterceptorProcessor", GlobalChannelInterceptorProcessor__BeanDefinitions.getGlobalChannelInterceptorProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("datatypeChannelMessageConverter", DefaultDatatypeChannelMessageConverter__BeanDefinitions.getDatatypeChannelMessageConverterBeanDefinition());
    beanFactory.registerBeanDefinition("integrationArgumentResolverMessageConverter", ConfigurableCompositeMessageConverter__BeanDefinitions.getIntegrationArgumentResolverMessageConverterBeanDefinition());
    beanFactory.registerBeanDefinition("integrationMessageHandlerMethodFactory", MessageHandlerMethodFactoryCreatingFactoryBean__BeanDefinitions.getIntegrationMessageHandlerMethodFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("integrationListMessageHandlerMethodFactory", MessageHandlerMethodFactoryCreatingFactoryBean__BeanDefinitions.getIntegrationListMessageHandlerMethodFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("converterRegistrar", ConverterRegistrar__BeanDefinitions.getConverterRegistrarBeanDefinition());
    beanFactory.registerBeanDefinition("integrationConversionService", CustomConversionServiceFactoryBean__BeanDefinitions.getIntegrationConversionServiceBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.integration.dsl.context.IntegrationFlowBeanPostProcessor", IntegrationFlowBeanPostProcessor__BeanDefinitions.getIntegrationFlowBeanPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.integration.dsl.context.IntegrationFlowContext", StandardIntegrationFlowContext__BeanDefinitions.getIntegrationFlowContextBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.integration.dsl.BaseIntegrationFlowDefinition$ReplyProducerCleaner", BaseIntegrationFlowDefinition_ReplyProducerCleaner__BeanDefinitions.getReplyProducerCleanerBeanDefinition());
  }
}
